DISTINCT сортирует по алфавиту, а потом отбрасывает повторяющиеся, поскольку содержит неявную сортировку.

_ символ обозначает, что любой символ может стоять на месте этого знака и притом, только один

экранирование  _ символ, который экранируется
	[_]
	LIKE '%#_%' ESCAPE '#'

^ отрицание

состоящее только из цифр NOT LIKE '%[^0-9]%'

CAST используется в конкатенации строк, когда используются разные типы данных. Например, Имя + ' ' + CAST([Дата рождения] AS nvarchar). Потому что имя - строковый тип, а [Дата рождения] - тип даты

Функциии агрегирования
			SUM
			AVG
			COUNT
			MAX
			MIN

Результат отсортировать следующим образом: в первую очередь студенты второго и третьего курса, а затем студенты других курсов
ORDER BY 
		CASE
			WHEN Курс IN (2, 3)
			THEN 1
			ELSE 2
		END

Все имена столбцов, приведенных во фразе SELECT должны присутствовать во фразе GROUP BY, за исключением случаев, когда имя столбца используется в функции агрегирования..
Во фразе GROUP BY могут использоваться столбцы, которых нет в SELECT.

GROUP BY сортирует строки по алфавиту(возрастанию)....

HAVING используется для проверки групп строк

При использовании оператора SQL CROSS JOIN каждая строка левой таблицы сцепляется с каждой строкой правой таблицы. В результате получается таблица со всеми возможными сочетаниями строк обеих таблиц.

Если используется функция агрегирования, то должно быть предложение GROUP BY
SELECT С.Фамилия
FROM Студенты С JOIN Факультеты Ф ON С.id_факультета = Ф.id_факультета JOIN Преподаватели П ON П.id_факультета = Ф.id_факультета
GROUP BY С.Фамилия
HAVING YEAR(MAX(П.[Дата рождения])) = 2000;
SELECT П.[Дата рождения]
FROM Студенты С JOIN Факультеты Ф ON С.id_факультета = Ф.id_факультета JOIN Преподаватели П ON П.id_факультета = Ф.id_факультета
HAVING YEAR(MAX(П.[Дата рождения])) = 2000;

--Выбрать курс, группу, фамилию, имя, отчество студента, и если студент сдал дисциплину на 5 название дисциплины.
SELECT С.Фамилия, С.Имя, С.Отчество, Д.Название
FROM Студенты С LEFT JOIN Успеваемость У ON С.[Номер студенческого билета] = У.[Номер Студенческого Билета] AND У.Оценка = 5
	 LEFT JOIN Дисциплины Д ON Д.id_дисциплины = У.id_дисциплины
Если написать WHERE У.Оценка = 5, то отсекутся значение не с оценкой 5.

Не рекомендуется использовать EXISTS в HAVING

Подзапрос не должен возвращать NULL.
Ни слева, ни справа от знака равенства не должно быть NULL.

EXISTS используется с коррелирующими подзапросами.

EXISTS эффективен по памяти, так как как только он нашел подходящие строки, остальные он не просматривает, он уже знает ответ на вопрос. Он вернет TRUE и все. Он не выбирает все данные. 
Как только он нашел подходящую строчку, он сразу выдает ответ.

Правила выполнения подзапроса:
				а. Если некоррелирующий подзапрос: Сначала выполняется подзапрос, а затем результат подставляется во внешний запрос. Подзапрос выполняется один раз.
				б. Если коррелирующий подзапрос: подзапрос выполняется для каждой строки-кандидата из внешнего запроса. 
				   Подзапрос выполняется для каждой строчки из внешнего запроса.

CTE(общетабличные выражения)
Мы можем создать табличку, которая существует временно. Время существования ограничено командой. После того, как выполниться команда, которая идет за CTE, табличка перестает существовать.
WITH name_cte AS 
	(
		SELECT...
	)
SELECT
Запрос выполниться только тогда, когда мы обратимся к CTE.

При использовании UNION количество столбцов должно быть одинаковым и типы столбцов одинаковые. Если количество столбццов неодинаковое, добавить NULL.

UNION исключает дубликаты. За UNION стоит неявная сортировка.
Принцип работы UNION:
			1. Сортирует строки.
			2. Исключает дубликаты.

В UNION ALL сортировки нет.
UNION ALL выполняться будет быстрее, чем UNION, поскольку в нем нет неявной сортровки.

INTESRSECT содержит неявную сортировку, поэтому отсеит повторяющиеся фамилии.
Если мы объединяем таблицы Студенты и Преподаватели, и содержатся 2 студента-Иванова и 2 преподавателя-Иванова, то в результирующую таблицу попадет только 1 фамилия.

EXCEPT — разница множеств.
Правила при EXCEPT:
	1. Количество столбцов должно совпадать.
	2. Типы столбцов попарно должны совпадать.
	3. Сортировка ставится в самом конце и относится к результатам.

Правила при построении операторов над множествами:
							1. Команды SELECT должны выбирать одинаковое кол-во столбцов.
							2. Соответствующие столбцы должны иметь одинаковый тип.
							3. В результирующей таблице столбцы именуются по первой SQL-команде.
							4. Предложение ORDER BY может стоять только в конце запроса и относится к окончательной таблице-результату.
							5. Ссылка на столбцы в предложении ORDER BY только по порядковым номерам или по именам(алиасам) первого подзапроса.

= ALL равно сразу всем значениям.
<> ALL — значение столбца не совпадает ни с одним из значений подзапроса.
>= ALL — выберет максимальное значение из подзапроса.























