--1. Выбрать все данные о самом молодом преподавателе.
SELECT *
FROM Преподаватели
WHERE [Дата рождения] = (
							SELECT MAX([Дата рождения])
							FROM Преподаватели
						);

/*2. Выбрать все данные о самом молодом и самом старшем преподавателях.*/
SELECT *
FROM Преподаватели
WHERE [Дата рождения] IN (
							(
								SELECT MAX([Дата рождения])
								FROM Преподаватели
							),
							(
								SELECT MIN([Дата рождения])
								FROM Преподаватели
							)
						);

--3. Выбрать группы, в которых учится столько же студентов, сколько на 2 курсе в 10 группе.
SELECT Курс, Группа
FROM Студенты
GROUP BY Курс, Группа
HAVING COUNT(Группа) = (
							SELECT COUNT(Группа)
							FROM Студенты
							WHERE Курс = 3 AND Группа = 10
					   );

--через CTE
WITH COUNT_STUD(Курс, Группа, [Кол-во студентов]) AS(
	SELECT Курс, Группа, COUNT([Номер Студенческого Билета])
	FROM Студенты
	WHERE Курс = 2 AND Группа = 10
	GROUP BY Курс, Группа
)
SELECT С.Курс, С.Группа
FROM Студенты С JOIN COUNT_STUD C_S ON С.Курс = C_S.Курс AND С.Группа = C_S.Группа
GROUP BY С.Курс, С.Группа, C_S.[Кол-во студентов]
HAVING COUNT([Номер Студенческого Билета]) = C_S.[Кол-во студентов]

--4. Выбрать названия дисциплин, которые сдавались студентами 2 курса 10 группой.
SELECT Д.Название
FROM Дисциплины Д JOIN Успеваемость У ON У.id_дисциплины = Д.id_дисциплины JOIN Студенты С ON С.[Номер студенческого билета] = У.[Номер Студенческого Билета]
WHERE С.Курс = 2 AND С.Группа = 10;

/*5. Выбрать все данные преподавателей, которые работают на одном факультете с преподавателем Ивановым Иван Ивановичем.*/
SELECT *
FROM Преподаватели П
WHERE П.id_факультета = (
						SELECT id_факультета
						FROM Преподаватели
						WHERE Фамилия = 'Иванов'
					);

/*6. Выбрать названия факультетов, на которых средняя стипендия ниже средней стипендии на факультете ПММ.*/
SELECT Ф.Название
FROM Факультеты Ф JOIN Студенты С ON Ф.id_факультета = С.id_факультета
GROUP BY Ф.Название
HAVING AVG(С.Стипендия) < (
							SELECT AVG(С.Стипендия)
							FROM Факультеты Ф JOIN Студенты С ON С.id_факультета = Ф.id_факультета
							WHERE Ф.Название = 'ПММ'
						);
--CTE
WITH AVG_Scholarship(Faculty, AVG_Stud) AS
(
	SELECT Ф.Название, AVG(С.Стипендия)
	FROM Факультеты Ф JOIN Студенты С ON Ф.id_факультета = С.id_факультета
	WHERE Ф.Название = 'ПММ'
	GROUP BY Ф.Название
)
SELECT Ф.Название
FROM AVG_Scholarship AVG_S, Факультеты Ф JOIN Студенты С ON Ф.id_факультета = С.id_факультета
GROUP BY Ф.Название, AVG_S.AVG_Stud
HAVING AVG_S.AVG_Stud > AVG(С.Стипендия);

/*7. Выбрать названия факультетов, на которых количество студентов второго курса совпадает с количеством студентов на втором курсе факультета ПММ.*/
SELECT Ф.Название
FROM Факультеты Ф JOIN Студенты С ON Ф.id_факультета = С.id_факультета
WHERE С.Курс = 2
GROUP BY Ф.Название
HAVING COUNT(С.[Номер студенческого билета]) = 
											(
												SELECT COUNT(С.[Номер студенческого билета])
												FROM Факультеты Ф JOIN Студенты С ON Ф.id_факультета = С.id_факультета
												WHERE С.Курс = 2 AND Ф.Название = 'ПММ'
											);

--8. Выбрать названия факультетов без деканов.
SELECT Ф_ВНЕШ.Название
FROM Факультеты Ф_ВНЕШ
WHERE EXISTS
			(
				SELECT 1
				FROM Факультеты Ф_ВНУТР
				WHERE Ф_ВНЕШ.id_факультета = Ф_ВНУТР.id_факультета AND Ф_ВНУТР.id_декана IS NULL
			);

--9. Выбрать названия факультетов без преподавателей.
SELECT Название
FROM Факультеты
WHERE id_факультета =
			(
				SELECT Ф.id_факультета
				FROM Факультеты Ф LEFT JOIN Преподаватели П ON Ф.id_факультета = П.id_факультета
				GROUP BY Ф.id_факультета
				HAVING COUNT(П.id_преподавателя) = 0
			);

--10. Выбрать все данные о студентах, у которых еще не было сессии.
SELECT *
FROM Студенты С_ВНЕШ
WHERE NOT EXISTS
			(
				SELECT 1
				FROM Успеваемость У
				WHERE У.[Номер Студенческого Билета] = С_ВНЕШ.[Номер студенческого билета]
			);

--11. Выбрать все данные о студентах, которые учатся на курсах, на которых менее 1000 студентов.
SELECT *
FROM Студенты С_ВНЕШ
WHERE EXISTS(
				SELECT 1
				FROM Студенты
				WHERE С_ВНЕШ.Курс = Курс
				GROUP BY КУРС
				HAVING COUNT([Номер Студенческого Билета]) < 1000
			);

--12. Выбрать название вакантной должности.
SELECT Название 
FROM Должности Д_ВНЕШ
WHERE NOT EXISTS
				(
					SELECT 1
					FROM Должности Д JOIN Преподаватель_в_Должности ПВД ON Д.id_должности = ПВД.id_должности JOIN Преподаватели П 
						 ON П.id_преподавателя = ПВД.id_преподавателя
					WHERE Д.id_должности = Д_ВНЕШ.id_должности
				);

/*13. Выбрать фамилии студентов, которые получают стипендию больше, чем средняя стипендия на их факультете.*/
SELECT Фамилия
FROM Студенты С_ВНЕШ
WHERE EXISTS
			(
				SELECT AVG(Стипендия)
				FROM Студенты
				WHERE С_ВНЕШ.id_факультета = id_факультета
				GROUP BY id_факультета
				HAVING С_ВНЕШ.Стипендия > AVG(Стипендия)
			)

--14. Выбрать название дисциплин, которые не сдавались студентами в зимнюю сессию.
SELECT Д_ВНЕШ.Название
FROM Дисциплины Д_ВНЕШ
WHERE NOT EXISTS
				(
					SELECT 1
					FROM Дисциплины Д_ВНУТР JOIN Успеваемость У ON Д_ВНУТР.id_дисциплины = У.id_дисциплины
					WHERE Д_ВНЕШ.id_дисциплины = Д_ВНУТР.id_дисциплины AND MONTH(У.Дата) IN (1, 2, 12)
				);

/*15. Выбрать курсы и группы без повторений тех факультетов, на которых преподается дисциплина Базы данных.*/
SELECT DISTINCT Курс, Группа
FROM Студенты
WHERE EXISTS(
				SELECT 1
				FROM Студенты С JOIN Успеваемость У ON С.[Номер Студенческого Билета] = У.[Номер Студенческого Билета]
					 JOIN Дисциплины Д ON Д.id_дисциплины = У.id_дисциплины
				WHERE Д.Название = 'БД'
			);

--16. Выбрать по каждой должности ФИО преподавателя, который принят на работу в эту должность последними.
WITH MAX_DATE([Дата вступления], [id должности]) AS(
														SELECT MAX(ПВД.[Дата вступления]), ПВД.id_должности
														FROM Преподаватели П JOIN Преподаватель_в_Должности ПВД ON П.id_преподавателя = ПВД.Id_преподавателя
														GROUP BY ПВД.id_должности
												   )
SELECT П.Фамилия
FROM Преподаватели П JOIN Преподаватель_в_Должности ПВД ON ПВД.Id_преподавателя = П.id_преподавателя JOIN MAX_DATE M_D ON M_D.[id должности] = ПВД.id_должности
WHERE ПВД.[Дата вступления] = M_D.[Дата вступления]