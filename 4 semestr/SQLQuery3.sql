--Выбрать названия дисциплин, код которых состоит только из цифр. Результат отсортировать по коду дисциплины.
SELECT Название
FROM Дисциплины
WHERE [Код дисциплины] NOT LIKE '%[^0-9]%'
ORDER BY [Код дисциплины];

/*Выбрать фамилию и инициалы студентов, в фамилии которых первая и последняя буквы а. Фамилии и инициалы необходимо вывести прописными буквами.*/
SELECT LOWER(Фамилия) + ' ' + LOWER(SUBSTRING(Имя, 1, 1)) + '. ' +
		CASE 
			WHEN Отчество IS NULL
			THEN ''
			ELSE LOWER(SUBSTRING(Отчество, 1, 1)) + '.'
		END
FROM Студенты
WHERE LEFT(Фамилия, 1) = 'а' AND RIGHT(Фамилия, 1) = 'а';

--Выбрать все данные о преподавателях, в e-mail которых до символа @ три или менее символов.
SELECT *
FROM Преподаватели
WHERE [e-mail] LIKE '___@%' OR [e-mail] LIKE '__@%' OR [e-mail] LIKE '_@%';
--WHERE CHARINDEX('@', [e-mail]) <= (3 + 1);

--Выбрать названия факультетов, состоящие строго из 3 слов. Результат отсортировать в лексикографическом порядке.
SELECT Название
FROM Факультеты
WHERE LTRIM(RTRIM(Название)) LIKE '% % %' AND LTRIM(RTRIM(Название)) NOT LIKE '% % % %'
ORDER BY Название;

/*Выбрать фамилию и инициалы преподавателей, id которых вне диапазона от 2 до 12, и в e-mail которых не входят символы %, ., &, но входит символ _ или ‒. 
Результат отсортировать в лексикографическом порядке.*/
SELECT Фамилия + ' ' + SUBSTRING(Имя, 1, 1) + '. ' + 
		CASE 
			WHEN Отчество IS NULL
			THEN ''
			ELSE SUBSTRING(Отчество, 1, 1)
		END
FROM Преподаватели
WHERE id_преподавателя NOT BETWEEN 2 AND 12 
	AND ([e-mail] NOT LIKE '%#%%' ESCAPE '#' AND [e-mail] NOT LIKE '%,%' AND [e-mail] NOT LIKE '%&%') 
	AND ([e-mail] LIKE '%#_%' ESCAPE '#' OR [e-mail] LIKE '%-%')
ORDER BY Фамилия, Имя, Отчество;

/*Выбрать все данные о студентах с фамилиями, заканчивающимися на букву ц, изменив фамилию следующим образом: добавить в конец фамилии енко.*/
SELECT [Номер студенческого билета], Фамилия + 'енко', Имя, Отчество, [Дата рождения], Курс, Группа, Стипендия, id_факультета
FROM Студенты
WHERE RIGHT(Фамилия, 1) = 'ц'

--Выбрать фамилию, имя, дату рождения и возраст студентов. Результат отсортировать по возрасту.
SELECT Фамилия, Имя, [Дата рождения], YEAR(GETDATE()) - YEAR([Дата рождения]) -
						CASE
							WHEN MONTH(GETDATE()) > MONTH([Дата рождения]) OR (MONTH(GETDATE()) = MONTH([Дата рождения]) AND DAY(GETDATE()) >= DAY([Дата рождения]))
							THEN 0
							ELSE 1
						END
FROM Студенты
ORDER BY [Дата рождения];

/*Выбрать фамилию, имя, дату рождения, курс, группу студентов в одном столбце. В результат должны войти данные только о студентах четных курсов. Результат отсортировать по этому столбцу.*/
SELECT Фамилия + ' ' + Имя + ' ' + CAST([Дата рождения] AS nvarchar) + ' ' + CAST(Курс AS nvarchar) + ' курс ' + CAST(Группа AS nvarchar) + ' группа'
FROM Студенты
WHERE КУРС % 2 = 0
ORDER BY Курс;

--Выбрать фамилию и инициалы студентов, название времени года, к которому относится его день рождения.
SELECT Фамилия + ' ' + SUBSTRING(Имя, 1, 1) + '. ' + 
		CASE 
			WHEN Отчество IS NULL
			THEN ''
			ELSE SUBSTRING(Отчество, 1, 1)
		END + '.',
		CASE
			WHEN MONTH([Дата рождения]) IN (1, 2, 12)
			THEN 'зима'

			WHEN MONTH([Дата рождения]) IN (3, 4, 5)
			THEN 'весна'

			WHEN MONTH([Дата рождения]) IN (6, 7, 8)
			THEN 'лето'

			WHEN MONTH([Дата рождения]) IN (9, 10, 11)
			THEN 'осень'
		END AS 'Время года'
FROM Студенты;

/*Выбрать фамилию, имя, отчество студентов, и если студент четвертого курса, то в последнем столбце результирующей таблицы вывести сообщение “Выпускник”. 
Результат отсортировать следующим образом: в первую очередь студенты второго и третьего курса, а затем студенты других курсов, и по фамилии, имени и отчеству в лексикографическом порядке.*/
SELECT Фамилия, Имя, Отчество, Курс,
		CASE
			WHEN Курс = 4
			THEN 'Выпускник'
		END
FROM Студенты
ORDER BY 
		CASE
			WHEN Курс IN (2, 3)
			THEN 1
			ELSE 2
		END, Фамилия, Имя, Отчество;

--Выбрать дату рождения самого молодого студента.
SELECT MAX([Дата рождения])
FROM Студенты

-- Выбрать количество различных имен студентов.
SELECT COUNT(DISTINCT Имя)
FROM Студенты

--Выбрать количество преподавателей, которые не имеют руководителей.
SELECT COUNT(id_преподавателя)
FROM Преподаватели
WHERE id_руководителя IS NULL

/*Выбрать максимальную, минимальную, среднюю и суммарную стипендию на 2 курсе в 10 группе. 
Среднюю стипендию найти двумя способами: с помощью функции агрегирования AVG и с помощью функций SUM и COUNT.*/
SELECT MAX(Стипендия) AS 'Максимальная стипендия', MIN(Стипендия) AS 'Минимальная стипендия', 
		AVG(Стипендия) AS 'Средняя стипендия', SUM(Стипендия) / COUNT(Фамилия) AS 'Средняя стипендия', SUM(Стипендия) AS 'Суммарная стипендия'
FROM Студенты
WHERE Курс = 2 AND Группа = 10

--Выбрать суммарную стипендию за пол года.
SELECT Стипендия * 6
FROM Студенты

--Выбрать средний возраст студентов второго курса.
SELECT AVG(YEAR(GETDATE()) - YEAR([Дата рождения]) -
						CASE
							WHEN MONTH(GETDATE()) > MONTH([Дата рождения]) OR (MONTH(GETDATE()) = MONTH([Дата рождения]) AND DAY(GETDATE()) >= DAY([Дата рождения]))
							THEN 0
							ELSE 1
						END)
FROM Студенты
WHERE КУРС = 2;