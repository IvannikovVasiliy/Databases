Избыточность данных. Аномалии модификации: аномалия вставки, аномалия обновления, аномалия удаления.
Основная цель проектирования реляционной базы данных заключается в группировании атрибутов в отношения таким образом, чтобы минимизировать избыточность данных 
и тем самым сократить объем памяти, необходимый для физического хранения отношений, представленных в виде таблиц. 
При работе с отношениями, содержащими избыточные данные, могут возникать проблемы, которые называются аномалиями обновления и подразделяются на аномалии вставки, удаления и модификации.
Отношения:
Staff (staffNo, sName, position, salary, branchNo)
Branch (branchNo, bAddress)
StaffBranch (staffNo, sNatne, position, salary, branchNo, bAddress)
Аномалии вставки.
	• При вставке сведений о новых сотрудниках в отношение StaffBranch необходимо указать и сведения об отделении компании, в котором эти сотрудники работают. 
	  Например, при вставке сведений о новом сотруднике отделения 'В007' требуется ввести сведения о самом отделении 'В007', 
	  которые должны соответствовать сведениям об этом же отделении в других строках отношения StaffBranch. 
	  Отношения Staff и Branch не подвержены влиянию этой потенциальной несовместимости данных, 
	  поскольку для каждого сотрудника в отношение Staff потребуется ввести только соответствующий номер отделения компании. 
	  Кроме того, сведения об отделении компании с номером 'BO07' заносятся в базу данных однократно, в виде единственной строки отношения Branch.
	• Для вставки сведений о новом отделении компании, которое еще не имеет	собственных сотрудников, 
	  требуется присвоить значение NULL всем атрибутам описания персонала отношения StaffBranch, включая и табельный номер сотрудника staffNo. 
	  Но поскольку атрибут staffNo является первичным ключом отношения StaffBranch, то попытка ввести значение NULL в атрибут staffNo вызовет нарушение целостности сущностей 
	  и потому будет отклонена. Следовательно, в отношение StaffBranch невозможно ввести строку о новом отделении компании, содержащую значение NULL в атрибуте staffNo. 
	  Структура отношений Staff и Branch, позволяет избежать возникновения этой проблемы, 
	  поскольку сведения об отделениях компании вводятся в отношение Branch независимо от ввода сведений о сотрудниках.
	  Сведения о сотрудниках, которые будут работать в новом отделении компании, могут быть введены в отношение Staff позже.
Аномалии удаления.
При удалении из отношения StaffBranch строки с информацией о последнем сотруднике некоторого отделения компании сведения об этом отделении будут полностью удалены из базы данных. 
Например, после удаления из отношения Staff Branch строки для сотрудника 'Mary' с табельным номером 'SA9' из базы данных неявно будут удалены все сведения об отделении с номером В0071.
Аномалии модификации.

Компоненты среды СУБД. Функции СУБД.
В среде СУБД можно выделить следующие пять основных компонентов: 
								аппаратное обеспечение;
								программное обеспечение;
								данные(мост);
								процедуры;
								пользователей.
Аппаратное обеспечение
Для работы СУБД и приложений необходимо некоторое аппаратное обеспечение. 
Оно может варьировать в очень широких пределах — от единственного персонального компьютера или одного мэйнфрейма до сети из многих компьютеров.
Используемое аппаратное обеспечение зависит от требований данной организации и типа СУБД. 
Одни СУБД предназначены для работы только с конкретными типами операционных систем или оборудования, 
другие могут работать с широким кругом аппаратного обеспечения и различными операционными системами.
Для работы СУБД обычно требуется некоторый минимум оперативной и дисковой памяти, 
но такой минимальной конфигурации может оказаться совершенно недостаточно для достижения приемлемой производительности системы.
Программное обеспечение.
Этот компонент охватывает программное обеспечение самой СУБД и прикладных программ, вместе с операционной системой, включая и сетевое программное обеспечение, если СУБД используется в сети.
Обычно приложения создаются на языках третьего поколения, таких как С, C++, Java, Visual Basic, COBOL, Fortran, Ada или Pascal, 
или на языках четвертого поколения, таких как SQL, операторы которых внедряются в программы на языках третьего поколения.
Данные.
Данные играют роль моста между компьютером и человеком. База данных содержит как рабочие данные, так и метаданные, т.е. "данные о данных".
Процедуры
К процедурам относятся инструкции и правила, которые должны учитываться при проектировании и использовании базы данных. 
Пользователям и обслуживающему персоналу базы данных необходимо предоставить документацию, содержащую подробное описание процедур использования и сопровождения данной системы.
Пользователи.

Критерии выбора СУБД.
Основные этапы процедуры выбора СУБД:
					1. Определение предметной области проводимого исследования
					2. Сокращение списка выбора до двух-трех продуктов
					3. Оценка продуктов
					4. Проведение обоснованного выбора и подготовка отчета

Модель “сущность-связь”. ER-модели. Типы связей. Кардинальность связи. Дочерняя и родительская сущности. Сильная и слабая сущности. Зависимая и независимая сущности.
Одна из наиболее сложных проблем проектирования базы данных связана с тем, что проектировщики, программисты и конечные пользователи, как правило, 
рассматривают данные и их назначение по-разному. Разработанный проект позволит удовлетворить все требования пользователей только при том условии, 
что и проектировщики, и пользователи придут к единому пониманию того, как работает данная конкретная организация.
Одним из примеров модели такого типа является модель "сущность-связь" (Entity-Relationship model, или ER-модель). 
ER-моделирование представляет собой нисходящий подход к проектированию базы данных, который начинается с выявления наиболее важных данных, 
называемых сущностями (entities), и связей (relationships) между данными, которые должны быть представлены в модели. 
Затем в модель вносятся дополнительные сведения, например, указывается информация о сущностях и связях, называемая атрибутами, 
а также все ограничения, относящиеся к сущностям, связям и атрибутам.
Тип сущности. Группа объектов с одинаковыми свойствами, которая рассматривается в конкретной предметной области как имеющая независимое существование.
Основной концепцией ER-модели является тип сущности, который представляет группу объектов реального мира, обладающих одинаковыми свойствами. 
Тип сущности характеризуется независимым существованием и может быть объектом с физическим (или реальным) существованием или объектом с концептуальным (или абстрактным) существованием.
Экземпляр сущности. Однозначно идентифицируемый объект, который относится к сущности определенного типа.
Каждый однозначно идентифицируемый объект типа сущности, который относится к сущности определенного типа, называется просто экземпляром сущности.
Каждый тип сущности обозначается именем и характеризуется списком свойств. База данных, как правило, содержит много разных типов сущностей. 
Например, такие типы сущностей, как Staff, Branch, PropertyForRent и PrivateOwner(это таблицы, они являются экземплярами сущности).
Тип связи. Набор осмысленных ассоциаций между сущностями разных типов. 
Тип связи является набором ассоциаций между одним или несколькими типами сущностей, участвующими в этой связи. Каждому типу связи присваивается имя, которое должно описывать его назначение.
В качестве примера типа связи можно указать связь Powns (Владеет недвижимостью) между сущностями PrivateOwner (Владелец недвижимости) и PropertyForRent (Объект недвижимости).
Экземпляр связи . Однозначно идентифицируемая ассоциация, которая включает по одному экземпляру сущности из каждого участвующего в связи типа сущности.
Степень типа связи(кардинаьльность связи). Количество типов сущностей, которые охвачены данной связью. 403
Сущности, охваченные некоторой связью, называются участниками этой связи. Количество участников связи определенного типа называется степенью этой связи. 
Следовательно, степень связи указывает количество типов сущностей, охваченных данной связью.
Для каждой двухсторонней связи 1:* сущность, находящаяся на стороне связи "один", определяется как родительская, а сущность на стороне связи "многие" - как дочерняя.
Если выбрать первичный ключ для сущности возможно, такая сущность — сильная. Для каждой сильной сущности в модели данных создается отношение, включающее все простые атрибуты этой сущности.
И наоборот, если выбрать первичный ключ для заданной сущности невозможно, то ее называют слабой. 
Для каждой слабой сущности, присутствующей в модели данных, создается отношение, включающее все простые атрибуты этой сущности. 
Первичный ключ слабой сущности частично или полностью зависит от ключа сущности-владельца.
		Страны
	CountryID	Название
	001		США
	002		Канада
			Авторы
	AuthorID	Автор	CountryID
	001		Орсон	001
	002		Этвуд	001
В данной модели отношение Авторы — сильная сущность, независимая сущность, а Страны — слабая сущность, поскольку зависит от отношения Авторы, она же является зависимой от "Авторы".

Преимущества и недостатки СУБД.
Преимущества
	Контроль за избыточностью данных
	Непротиворечивость данных
	Больше полезной информации при том же объеме хранимых данных
	Совместное использование данных
	Поддержка целостности данных
	Повышенная безопасность
	Применение стандартов
	Повышение эффективности с ростом масштабов системы
	Возможность нахождения компромисса при противоречивых требованиях
	Повышение доступности данных и их готовности к работе
	Улучшение показателей производительности
	Упрощение сопровождения системы за счет независимости отданных
	Улучшенное управление параллельной работой
	Развитые службы резервного копирования и восстановления
Недостаток
	Сложность
	Размер
	Стоимость СУБД
	Дополнительные затраты на аппаратное обеспечение
	Затраты на преобразование
	Производительность
	Более серьезные последствия при выходе системы из строя

Проектирование БД. Концептуальное проектирование БД. Этапы концептуального уровня проектирования.
Концептуальное проектирование включает определение типов важнейших сущностей и существующих между ними связей и атрибутов.
Концептуальное проектирование базы данных. Конструирование информационной модели предприятия, не зависящей от каких-либо физических условий реализации.
Концептуальное проектирование базы данных начинается с создания концептуальной модели данных предприятия, полностью независимой от любых деталей реализации.
Этапы концептуального проектирования базы данных
						1. Создание локальной концептуальной модели данных исходя из представлений о предметной области каждого из типов пользователей.
						2. Определение типов сущностей.
						3. Определение типов связей.
						4. Определение атрибутов и связывание их с типами сущностей и связей.
						5. Определение доменов атрибутов.
						6. Определение атрибутов, являющихся потенциальными и первичными ключами.
						7. Обоснование необходимости использования понятий расширенного моделирования (необязательный этап).
						8. Проверка модели на отсутствие избыточности.
						9. Проверка соответствия локальной концептуальной модели конкретным пользовательским транзакциям.
						10. Обсуждение локальных концептуальных моделей данных с конечными пользователями.

Проектирование БД. Логическое проектирование БД. Этапы логического уровня проектирования.
Логическое проектирование — преобразование концептуального представления в логическую структуру базы данных, включая проектирование отношений.
Логическое проектирование базы данных. Конструирование информационной модели предприятия на основе существующих конкретных моделей данных, 
но без учета используемой СУБД и прочих физических условий реализации.
Логическая модель данных является источником информации для этапа физического проектирования. 
Она предоставляет разработчику физической модели данных средства проведения всестороннего анализа различных аспектов работы с данными, 
что имеет исключительно важное значение для выбора действительно эффективного проектного решения.
Этапы логического проектирования базы данных (для реляционной модели)
						1. Создание и проверка локальной логической модели данных на основе представления о предметной области каждого из типов пользователей.
						2. Устранение особенностей локальной логической модели, несовместимых с реляционной моделью (необязательный этап).
						3. Определение набора отношений исходя из структуры локальной логической модели данных.
						4. Проверка отношений с помощью правил нормализации.
						5. Проверка соответствия отношений требованиям пользовательских транзакций.
						6. Определение требований поддержки целостности данных.
						7. Обсуждение разработанных локальных логических моделей данных с конечными пользователями.
						8. Создание и проверка глобальной логической модели данных.
						9. Слияние локальных логических моделей данных в единую глобальную модель данных.
						10. Проверка глобальной логической модели данных.
						11. Проверка возможностей расширения модели в будущем.
						12. Обсуждение глобальной логической модели данных с пользователями.

Проектирование БД. Физическое проектирование БД. Этапы физического уровня проектирования. 
Физическое проектирование — принятие решения о том, как логическая модель будет физически реализована (с помощью таблиц) в базе данных, создаваемой с использованием выбранной СУБД.
Физическое проектирование базы данных. Описание конкретной реализации базы данных, размещаемой во внешней памяти. 
Физический проект описывает базовые отношения, определяет организацию файлов и состав индексов, применяемых для обеспечения эффективного доступа к данным, 
а также регламентирует все соответствующие ограничения целостности и мер защиты. 
Физическое проектирование базы данных предусматривает принятие разработчиком окончательного решения о способах реализации создаваемой базы. 
Поэтому физическое проектирование обязательно производится с учетом всех особенностей используемой СУБД. 
Между этапами физического и логического проектирования всегда имеется определенная обратная связь, 
поскольку решения, принятые на этапе физического проектирования с целью повышения производительности системы, могут потребовать определенной корректировки логической модели данных.
Этапы Физического проектирования базы данных (с использованием реляционной СУБД)
	1. Перенос глобальной логической модели данных в среду целевой СУБД.
	2. Проектирование базовых отношений в среде целевой СУБД.
	3. Проектирование отношений, содержащих производные данные.
	4. Реализация ограничений предметной области.
	5. Проектирование физического представления базы данных.
	6. Анализ транзакций.
	7. Выбор файловой структуры.
	8. Определение индексов.
	9. Определение требований к дисковой памяти.
	10. Разработка пользовательских представлений.
	11. Разработка механизмов защиты.
	12. Анализ необходимости введения контролируемой избыточности.
	13. Организация мониторинга и настройка функционирования операционной системы.

Распреденные СУБД.
Разработка распределенных баз данных, отражающих организационные структуры предприятий, позволяет сделать общедоступными данные, поддерживаемые каждым из существующих подразделений, 
обеспечив при этом их хранение именно в тех местах, где они чаще всего используются. 
Подобный подход расширяет возможности совместного использования информации, одновременно повышая эффективность доступа к ней.
Распределенная база данных — набор логически связанных между собой совокупностей разделяемых данных (и их описаний), которые физически распределены в некоторой компьютерной сети.
БД может быть распределена между компьютерами. Они могут быть сильно удалены друг от друга.
Распределенная СУБД — программный комплекс, предназначенный для управления распределенными базами данных и обеспечивающий прозрачный доступ пользователей к распределенной информации.
Распределенная система управления базой данных (распределенная СУБД) состоит из единой логической базы данных, разделенной на некоторое количество фрагментов. 
Каждый фрагмент базы данных сохраняется на одном или нескольких компьютерах, работающих под управлением отдельных СУБД и соединенных между собой сетью связи. 
Любой узел способен независимо обрабатывать запросы пользователей, требующие доступа к локально сохраняемым данным (т.е. каждый узел обладает определенной степенью автономности), 
а также способен обрабатывать данные, сохраняемые на других компьютерах сети. 
Пользователи взаимодействуют с распределенной базой данных через приложения. Приложения могут подразделяться на не требующие доступа к данным на других узлах (локальные приложения) 
и требующие подобного доступа (глобальные приложения). В распределенной СУБД должно существовать хотя бы одно глобальное приложение, поэтому 
любая такая СУБД должна иметь следующие характеристики.
							• Имеется набор логически связанных разделяемых данных.
							• Сохраняемые данные разбиты на некоторое количество фрагментов.
							• Может быть предусмотрена репликация фрагментов данных.
							• Фрагменты и их копии распределяются по разным узлам.
							• Узлы связаны между собой сетевыми соединениями.
							• Доступ к данным на каждом узле происходит под управлением СУБД.
							• СУБД на каждом узле способна поддерживать автономную работу локальных приложений.
							• СУБД каждого узла поддерживает хотя бы одно глобальное приложение.
Но нет необходимости в том, чтобы на каждом из узлов системы существовала своя собственная локальная база данных.

Трехуровневая архитектура ANSI-SPARC.
Было выделено 3 группы абстракций, т.е. трех различных уровней описания элементов данных. 
Эти уровни формируют трехуровневую архитектуру, которая охватывает внешний, концептуальный и внутренний уровни.
Уровень, на котором данные воспринимаются пользователями, называется внешним уровнем, тогда как СУБД и операционная система воспринимают данные на внутреннем уровне. 
Именно на внутреннем уровне данные реально сохраняются с использованием всех тех структур и файловой организации, которые описаны в приложении. 
Концептуальный уровень представления данных предназначен для отображения внешнего уровня на внутренний и обеспечения необходимой независимости друг от друга.
Цель трехуровневой архитектуры заключается в отделении пользовательского представления базы данных от ее физического представления.
Причины разделения на уровни:
			• Каждый пользователь должен иметь возможность обращаться к одним и тем же данным, реализуя свое собственное представление о них. 
			  Каждый пользователь должен иметь возможность изменять свое представление о данных, причем это изменение не должно оказывать влияния на других пользователей.
			• Пользователи не должны непосредственно иметь дело с такими подробностями физического хранения данных в базе, как индексирование и хеширование.
			  Иначе говоря, взаимодействие пользователя с базой не должно зависеть от особенностей хранения в ней данных.
			• Администратор базы данных (АБД) должен иметь возможность изменять структуру хранения данных в базе, не оказывая влияния на пользовательские представления.
			• АБД должен иметь возможность изменять концептуальную структуру базы данных без какого-либо влияния на всех пользователей.

Хранилища данных OLAP-системы и OLTP-системы. Тест FASMI(БАРМИ)
Хранилище данных. Предметно-ориентированный, интегрированный, привязанный ко времени и неизменяемый набор данных, предназначенный для поддержки принятия решений.
	• Предметная ориентированность. Хранилище данных организовано вокруг основных предметов организации (например, клиенты, товары и сбыт), 
	  а не вокруг прикладных областей деятельности (выставление счета клиенту, контроль запасов и продажа товаров). 
	  Это свойство отражает необходимость хранения данных, предназначенных для поддержки принятия решений, а не обычных оперативно-прикладных данных.
	• Интегрированность. Смысл этой характеристики состоит в том, что оперативно-прикладные данные обычно поступают из разных источников, 
	  которые часто имеют несогласованное представление одних и тех же данных, например используют разный формат. 
	  Для предоставления пользователю единого обобщенного представления данных необходимо создать интегрированный источник, обеспечивающий согласованность хранимой информации.
	• Привязка ко времени. Данные в хранилище точны и действительны только в том случае, если они привязаны к некоторому моменту или промежутку времени. 
	  Необходимость привязки хранилища данных ко времени следует из большой длительности того периода, за который была накоплена сохраняемая в нем информация, 
	  из явной или неявной связи временных отметок со всеми сохраняемыми данными, а также, что хранимая информация фактически представляет собой набор снимков состояния данных.
	• Неизменяемость. Это означает, что данные не обновляются в оперативном режиме, а лишь регулярно пополняются за счет информации из оперативных систем обработки. 
	  При этом новые данные никогда не заменяют, а лишь дополняют прежние. 
	  Таким образом, база данных хранилища постоянно пополняется новыми данными, последовательно интегрируемыми с уже накопленной информацией.
СУБД, созданная для поддержки оперативной обработки транзакций (OLTP), обычно рассматривается как непригодная для организации хранилищ данных, 
поскольку к этим двум типам систем предъявляются совершенно разные требования. 
Например, системы-OLTP проектируются с целью обеспечения максимально интенсивной обработки фиксированных транзакций, 
тогда как хранилища данных — прежде всего для обработки единичных произвольных запросов.
Для конкретной БД.
Система OLTP:
		1. Содержит текущие данные.
		2. Хранит подробные сведения.
		3. Данные являются динамическими.
		4. Повторяющийся способ обработки данных.
		5. Высокая интенсивность обработки транзакций.
		6. Предскакзуемый способ использования данных.
		7. Предназначена для обработки транзакций.
		8. Ориентировано на прикладные области.
		9. Поддержка принятия повседневных решений.
		10. Обслуживает большое кол-во работников исполниительного звена.
Хранилище данных:
		1. Содержит исторические данные.
		2. Хранит подробные сведения, а также частично и полностью обобщенные данные.
		3. Данные в основном являются статическими.
		4. Нерегламентированный, неструктированный способ обработки данных.
		5. Средняя и низкая интенсивность обработки транзакций.
		6. Непредсказуемый способ использования данных.
		7. Предназначено для проведения анализа.
		8. Ориентировано на предметные области.
		9. Поддержка принятия стратегических решений.
		10. Обслуживает относительно малое кол-во работников руководящего звена.
Системы OLTP оптимально подходят для интенсивной обработки транзакций, которые проектируются заранее, многократно повторяются и связаны преимущественно с обновлением данных.
Основная проблема при организации этой связи заключается в том, что поступающие из систем OLTP данные могут быть, 
несогласованными, фрагментированными, подверженными изменениям, содержащими дубликаты или пропуски.
Хранилище данных предназначено для поиска ответов на вопросы различных типов, начиная от относительно простых и заканчивая весьма сложными, 
а их работа зависит от того, какие инструментальные средства доступа применяют конечные пользователи.
OLAP-система — сисема оперативной аналитической обработки транзакций.
Такие инструменты общего назначения, как средства формирования отчетов и обработки запросов, позволяют легко ответить на вопросы типа "кто" и "что", касающиеся прошлых событий. 
Например, запрос "Какова была общая прибыль по такому-то региону за третий квартал 2002 года?" может быть направлен непосредственно в хранилище данных. 
Оперативная аналитическая обработка (OLAP) — динамический синтез, анализ и обобщение больших объемов многомерных данных.
Термин OLAP служит для описания технологии обработки данных, в которой применяется многомерное представление агрегированных данных 
для обеспечения быстрого доступа к стратегически важной информации в целях углубленного анализа. 
Технология OLAP позволяет пользователям глубже изучить и понять особенности своих корпоративных данных с использованием быстродействующих согласованных интерактивных методов доступа 
к широкому перечню возможных представлений данных.
Универсальным критерием определения ОLAP как инструмента является тест FASMI (быстрый анализ разделяемой многомерной информации). 
Рассмотрим детально каждую из составляющих этой аббревиатуры.
FAST (Быстрый) — означает, что система должна обеспечивать выдачу большинства ответов пользователям в сжатые сроки. 
		При этом самые простые запросы обрабатываются в течение одной секунды и очень немногие — более 20-ти.
ANALYSIS (Анализ) — означает, что система может справляться с любым логическим и статистическим анализом, характерным для данного приложения, 
		и обеспечивает его сохранение в виде, доступном для конечного пользователя.
SHARED (Разделяемый) — означает, что система осуществляет все требования защиты конфиденциальности (до уровня ячейки) 
		и, если множественный доступ к записи необходим, обеспечивает блокировку модификаций на соответствующем уровне.
MULTIDIMENSIONAL (Многомерный) — означает, что система должна обеспечить многомерное концептуальное представление данных, включая полную поддержку для иерархий и множественных иерархий. 
		Многомерность является ключевым критерием.
INFORMATION (Информация) — требуемая информация должна быть получена там, где она необходима.

1 нормальная форма. Нормализация. Функциональная зависимость. Ненормализованное представление данных.
Нормализация. Метод создания набора отношений с заданными свойствами на основе требований к данным, установленных в некоторой организации.
Нормализация часто выполняется в виде последовательности тестов с целью проверки соответствия (или несоответствия) некоторого отношения требованиям заданной нормальной формы.
Проектировщики баз данных могут использовать нормализацию в виде наборов тестов, применяемых к отдельным отношениям с целью нормализации реляционной схемы до заданной конкретной формы, 
что позволит предотвратить возможное возникновение аномалий обновления.
Функциональная зависимость. Описывает связь между атрибутами отношения. 
Например, если в отношении R, содержащем атрибуты А и В, атрибут B функционально зависит от атрибута А (что обозначается как А (В)), 
то каждое значение атрибута А связано только с одним значением атрибута B. (Причем атрибуты A и B могут состоять из одного или нескольких атрибутов.)
Если нам известно значение атрибута А, то при рассмотрении отношения с такой зависимостью в любой момент времени во всех строках этого отношения, содержащих указанное значение атрибута А, 
мы найдем одно и то же значение атрибута В. Таким образом, если две строки имеют одно и то же значение атрибута А, то они обязательно имеют одно и то же значение атрибута В. 
Однако для заданного значения атрибута В может существовать несколько различных значений атрибута А.
A---------->>>>>B Атрибут B функционально зависит от A.
Ненормализованная форма (ННФ). Таблица, содержащая одну или несколько повторяющихся групп данных.
Первая нормальная форма (1НФ). Отношение, в котором на пересечении каждой строки и каждого столбца содержится одно и только одно значение.

2 нормальная форма. Полная функциональная зависимость.
Полная функциональная зависимость. Если А и B атрибуты отношения, то атрибут B находится в полной функциональной зависимости от атрибута А, 
если атрибут B является функционально зависимым от А, но не зависит ни от одного собственного подмножества атрибута А.
Функциональная зависимость А—>в является полной функциональной зависмостью, если удаление какого-либо атрибута из А приводит к утрате этой зависимости. 
Функциональная зависимость А->В называется частичной, если в А есть некий атрибут, при удалении которого эта зависимость сохраняется.
Отношения:
Staff (staffNo, sName, position, salary, branchNo)
Branch (branchNo, bAddress)
StaffBranch (staffNo, sNatne, position, salary, branchNo, bAddress)
Например, рассмотрим следующую функциональную зависимость:
staffNo, sName —> branchNo
Здесь каждая пара значений (staffNo, sName) связана с единственным значением branchNo. Однако эта функциональная зависимость не является полной, 
поскольку branchNo также функционально зависит от подмножества {staffNo, sName), т.е. от атрибута staffNo.
Вторая нормальная форма применяется к отношениям с составными ключами, т.е. к таким отношениям, первичный ключ которых состоит из двух или нескольких атрибутов.
Вторая нормальная форма (2НФ). Отношение, которое находится в первой нормальной форме и каждый атрибут которого, не входящий в состав первичного ключа, 
характеризуется полной функциональной зависимостью от этого первичного ключа.
Пример
				Отделы персонала
	EmployeeID	[Имя сотрудника]	DeptID	DeptName
	Emp1		Джон			001	Финансы
	Emp2		Тина			002	Продажи
	Emp3		Карлос			003	Финансы
Это частичная зависимость, поскольку [Имя сотрудника] зависит от EmployeeID, а DeptName зависит от DeptID. Чтобы отношение соответствовало 2НФ, надо разделить на 2 отношения.
Пример 2 НФ.
			Сотрудники
	EmployeeID	[Имя сотрудника]	DeptID
	Emp1		Джон			001
	Emp2		Тина			002
	Emp3		Карлос			003
		Ведомства
	DeptID		DeptName
	001		Финансов
	002		Продажи
	003		Финансы

3 НФ. Транзитивная зависимость.
Транзитивная зависимость. Если для атрибутов А, B и C некоторого отношения существуют зависимости вида А->B и B->C, 
это означает, что атрибут C транзитивно зависит от атрибута А через атрибут B (при условии, что атрибут А функцианально не зависит ни от атрибута B, ни от атрибута C).
Транзитивная зависимость в базе данных – это косвенная связь между значениями в одной и той же таблице, которая вызывает функциональную зависимость. 
Чтобы достичь стандарта нормализации третьей нормальной формы (3NF), вы должны устранить любые переходные зависимости.
Третья нормальная форма (ЗНФ). Отношение, которое находится в первой и во второй нормальных формах и не имеет атрибутов, не входящих в первичный
ключ атрибутов, которые находились бы в транзитивной функциональной зависимостиот этого первичного ключа.
Пример транзитивной зависмости
			Офис
	Сотрудник	Отдел		Телефон
	Гришин		Бухгалтерия	1488 228
	Васильев	Бухгалтерия	1488 228
	Петров		Снабжение	5474 282
Транзитивная зависимость: Сотрудник->Отдел->Телефон
Чтобы обеспечить третью нормальную форму, давайте удалим транзитивную зависимость.
		Отдел
	Отдел		Телефон
	Бухгалтерия	1488 228
	Финансы		5474 282
		Сотрудник
	Сотрудник	Отдел
	Гришин		Бухгалтерия
	Васильев	Бухгалтерия
	Петров		Снабжение

12 правил Кодда:
		0. Фундаментальное правило. Любая реляционная СУБД должна управлять БД исключительно с помощью ее реляционных функций (создать таблицы, вносить данные, изменять их).
		1. Явное представление данных. Все данные хранятся в виде значений строк и столбцов.
		2. Гарантированный доступ к данным. Получить доступ к данным можно с помощью комбинаций: имя таблиц, значение первичного и внешнего ключа.
		   Это единственный способ получить данные.
		   Должно быть уникальное имя таблица и имя стобцов в пределах одной таблицы.
		3. Полная обработка неопределенных значений. Задаются с помощью определителя NULL.
		4. Доступ к словарю данных. 
		   Словарь данных — информация о данных (о том, какие есть таблицы, столбцы, информация о первичных ключах). Вся эта информация хранится в таблицах. 
		   Словарь данных — метаданные "данные о данных". Метаданные тоже хранятся в таблицах.
		5. Полнота подмножества языка. В реляционной СУБД м.б. несколько языков, но должен существовать один язык, который бы позволял осуществлять все следующие операции: 
		   1. Определение данных. Создание структур, которые хранят данные, создание таблиц. Команды языка определения данных: CREATE, DROP, ALTER.
		   2. Опредение представлений. Представление служит для того, чтобы скрыть реальную структуру данных от пользователей. 
		   3. Команды манипулирования данными. SELECT, UPDATE, INSERT, DELETE.
		   4. Команды ограничения целостности. 
		   5. Операции авторизации пользователей. В многопользовательских СУБД каждый пользователь должен входить под своим именем. 
		   6. Организация транзакций. Транзакция может включать либо одну команду языка определения данных или любое кол-во команд языка манипулирования данными. 
		      В язык управления транзакциями входит команды, позволяющие зафиксировать транзакцию. 
		      Пользователь ввел несколько Delete, потом фиксирует транзакцию и потом изменения фиксируются на сервере БД. 
		      До тех пор, пока пользователь не зафиксировал транзакцию, эти изменения будут видны только ему.
		6. Обновление представлений. Все представления, которые теоретически м.б. обновляемыми, должны быть обновляемыми.
		7. Наличие высокоуровневых операций обновления данных: вставка, изменение, удаление. Правило должно применяться к таблице.
		8. Физическая независимость данных. Прикладные программы не должны зависеть от используемых способов хранения данных и методов обращения к ним.
		   Все изменения на аппаратном уровне не должны сказываться на работе приложения. Если перенести базу с одного диска на другой, приложение так и должно работать.	
		9. Логическая независимость данных. Представление данных в приложении не должно зависеть от структуры таблиц.
		10. Независимость ограничений целостности. Вся информация, необходимая для поддержания целостности должна находится в словаре данных.
		11. Независимость от распредения данных. Распределенная БД не должна влиять на использование приложения.
		12. Согласование языковых уровней. Не должно быть иного средства доступа к данным, отличного от стандартного языка работы с данными.








